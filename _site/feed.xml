<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Saying Javascript</title>
    <description>A blog about Javascript, programming, and all of the beautiful and eccentric challenges one encounters while coding.
</description>
    <link>https://aleo23.github.io/</link>
    <atom:link href="https://aleo23.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Sep 2016 15:54:54 -0400</pubDate>
    <lastBuildDate>Wed, 21 Sep 2016 15:54:54 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Recursive Functions</title>
        <description>&lt;h1 id=&quot;what-is-recursion&quot;&gt;What is recursion?&lt;/h1&gt;

&lt;p&gt;Recursion is a computer science method where a solution can be derived from some amount of smaller solutions. This often means that a function will have to call upon itself with some sort of reduction until it reaches a base case. The base case is when the desired result can be found without another call to the function. This base case will keep the function from continually calling upon itself infinitely. Recursion can almost always be used in place of iteration and also save some time and add elegance to your code. Some examples of functions you could write using recursion are exponent and greatest common divisor. You could also implement a function that takes a given number of rounds and returns all possible moves for a rock paper scissors match or all possible combinations of change for a given dollar amount.&lt;/p&gt;

&lt;h1 id=&quot;recursive-functions-in-javascript&quot;&gt;Recursive Functions in Javascript&lt;/h1&gt;

&lt;p&gt;There are a few iterative functions that you may already know how to solve with a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop or even a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;.forEach()&lt;/code&gt; that are great practice problems to get started on your way to understanding recursion. Recursion is not a concept that most people will pick up overnight, or in a short span of time; recursion will most likely take you some time to master and that’s OK. I’m here to help you get started on your way to mastering recursion.&lt;/p&gt;

&lt;h6 id=&quot;countdown&quot;&gt;Countdown&lt;/h6&gt;

&lt;p&gt;This function is a pretty simple one that we are going to use for illustrative purposes. Countdown is a function that will log numbers to the console until it reaches 0. Take a moment to think about how you would solve this using an iterative &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop. We’re going to be solving this using recursion, but it helps to have an illustration in your mind for comparison. What do you think the base case will be? Hint: I gave you the answer already inside this section; recursively read this paragraph until you figure out the base case. If you said our base case will be when the number passed in is equal to 0, you are correct! Our base case is when we want our recursive function to terminate, and start moving back up the call stack. Countdown(5) would look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;countdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our function is going to continue logging &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; to the console until &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; is 0, in which case it will finally return and stop calling itself. Please note that alternatively, you &lt;em&gt;could&lt;/em&gt; make your base case 1 and call &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(number)&lt;/code&gt; one last time before returing, in order to eliminate one step from the process for optimization, but I felt the current implementation was clearer. If this base case was omitted, your computer would continue logging &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; to the console until it ran out of memory or the interpreter is shut down. I highly recommend not trying this, or at least saving your work first.&lt;/p&gt;

&lt;h6 id=&quot;factorial&quot;&gt;Factorial&lt;/h6&gt;

&lt;p&gt;A factorial of a number is the total sum of that number multiplied by every number between itself and 1, represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;n!&lt;/code&gt;. For example 5! is 120, found by multiplying 5 * 4 * 3 * 2 * 1. Let’s break this out into some code and visualize this in Javascript.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s examine each element of this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&quot;&gt;ternary operator&lt;/a&gt; and see what our function is doing on each step. You might have noticed that we have an extra case specified besides our base case. This error case is checking if the number we are passing into our function is a negative, and returning null if it is, because factorials only apply to positive integers. The next case is our base case. We’ll come back to that in just a second, can you think of how we can get our number value to reach our base case?&lt;/p&gt;

&lt;p&gt;By passing in &lt;code class=&quot;highlighter-rouge&quot;&gt;number - 1&lt;/code&gt; to our factorial function, we make another call to our factorial function with a number one value lower than the prevous iteration’s. We are also multiplying the result of that new function’s call by the current number. This will utilize what is known as the “call stack.” The call stack is a stack based data structure - last in, first out - that allows a function to keep track of where it was called from. The call stack will stand by, waiting for the bottom return value to return and move back up the chain. Finally, once 0 is passed in to our factorial function, we hit our base case, return the value 1.&lt;/p&gt;

&lt;p&gt;The interpreter will then travel back up the call stack, and eventually return the amount:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;120&lt;/strong&gt; once the 5 is multiplied by the return value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(4)&lt;/code&gt;, which was 24.&lt;/p&gt;

&lt;p&gt;24 was returned when 4 was multiplied by the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(3)&lt;/code&gt;, which was 6.&lt;/p&gt;

&lt;p&gt;6 was returned when 3 was multiplied by the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(2)&lt;/code&gt;, which was 2.&lt;/p&gt;

&lt;p&gt;2 was returned when 2 was multiplied by the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(1)&lt;/code&gt;, was was 1.&lt;/p&gt;

&lt;p&gt;1 was returned when 1 was multiplied by the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(0)&lt;/code&gt;, which was 1.&lt;/p&gt;

&lt;p&gt;This time our result does not have another call to factorial because we have hit our base case and simply returned 1. If you follow this stack backwards you should see how one can get from 1 to 120 using the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(5)&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;To understand recursion, one must first understand recursion. For another excellent blog post on recursion, &lt;a href=&quot;https://aleo23.github.io/posts/recursive-functions/&quot;&gt;please see here.&lt;/a&gt; A recursive function calls upon itself until it reaches the specified base case. Always remember to specify a base case and get one step closer to the base case on each iteration. Otherwise your recursive function becomes a resource eating glutton and &lt;a href=&quot;https://www.youtube.com/watch?v=8fvTxv46ano&quot;&gt;all your base&lt;/a&gt; are belong to us. Many problems can be solved through recursion, and practice will achieve mastery. Try refactoring some of your currently implemented iterative functions in recursion and feel the power!&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://github.com/JS-Challenges/recursion-prompts&quot;&gt;Recursion Prompts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://www.youtube.com/watch?v=k7-N8R0-KY4&quot;&gt;funfunfunction’s video all about Recursion, as part of his series on Functional programming in Javascript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://www.codecademy.com/courses/javascript-lesson-205&quot;&gt;Codecademy’s Recursion in Javascript Course&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://aleo23.github.io/posts/recursive-functions/</link>
        <guid isPermaLink="true">https://aleo23.github.io/posts/recursive-functions/</guid>
        
        <category>infinite loops</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Enter the Programming Dragon</title>
        <description>&lt;h2 id=&quot;love-to-code&quot;&gt;Love to Code?&lt;/h2&gt;

&lt;h6 id=&quot;who-doesnt&quot;&gt;Who doesn’t!?&lt;/h6&gt;

&lt;p&gt;Do you want to further your programming skills but feel like you don’t have enough time? Or maybe you just want to brush up on the basics? Practice re-factoring your code in the most elegant form possible?&lt;/p&gt;

&lt;h2 id=&quot;tell-me-more&quot;&gt;Tell me more…&lt;/h2&gt;

&lt;h6 id=&quot;practice-makes-perfect&quot;&gt;Practice Makes Perfect&lt;/h6&gt;

&lt;p&gt;Practice problems are one of the most effective ways to better your ability to write functions, as well as visualize code and its execution. There are a few great web sites out there that allow you to practice coding on single, modular problems. This allows you to practice writing complex functions to solve high level problems, without having to write your own test cases or HTML. These problems will cause you to use all of your programming kung fu to take them down. Another great benefit is practice using Test Driven Development (TDD).&lt;/p&gt;

&lt;h2 id=&quot;test-drive-what&quot;&gt;Test Drive What?&lt;/h2&gt;

&lt;h6 id=&quot;skip-this-section-if-you-like-bugs-hiding-in-your-code&quot;&gt;Skip this section if you like bugs hiding in your code&lt;/h6&gt;

&lt;p&gt;Test Driven Development is crucial to being an effective programmer. Writing tests for your code allow you bend and manipulate your code in different ways to ensure stability, even in extreme cases. This kind of meticulous and effective programming will lead to less bugs and more time for you to code. Major companies use TDD to ensure that their programs will run in various user environments with a similar user experience.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/books.jpg&quot;&gt;&lt;img src=&quot;/assets/images/books.jpg&quot; alt=&quot;bookshelf&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problems on these websites will vary in difficulty, so I encourage you to try each one to see which one is right for you. Each website has something different to offer and people choose might one over another for various reasons. The websites included support Javascript, as well as many other popular programming languages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I am in no way affiliated with any of the following websites; I just have fun on them.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;codewars&quot;&gt;Codewars&lt;/h2&gt;

&lt;p&gt;Codewars is a community driven code challenge website designed for all skill levels. Codewars has tests for anything from logging “Hello World!” to the console to writing your own interpreter to run code. They take a karate style approach, employing “kyu” ranks to earn as you gain more honor. Honor is gained by completing challenges, writing your own kata, and being an active member of the website’s community. It’s quick to get started and they have a wide range of problems to choose from.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codewars.com&quot;&gt;Codewars&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/codewars.png&quot;&gt;&lt;img src=&quot;/assets/images/codewars.png&quot; alt=&quot;codewars&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;leetcode&quot;&gt;Leetcode&lt;/h2&gt;

&lt;p&gt;Leetcode Online Judge, or Leetcode OJ for short, is designed specifically towards technical interviews. The problems submitted are real life interview questions. Leetcode offers about 400 problems to be solved in your preferred language. Furthermore, the companies submitting these questions are some of the biggest names in the industry including Facebook, Twitter, Google, Uber, and Microsoft. Leetcode hosts a weekly contest that ranks competitors against their rivals globally, with prizes for the top three.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com&quot;&gt;Leetcode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/leetcode.png&quot;&gt;&lt;img src=&quot;/assets/images/leetcode.png&quot; alt=&quot;leetcode&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;codefights&quot;&gt;Codefights&lt;/h2&gt;

&lt;p&gt;Codefights offers a slightly different approach to practice problems. In addition to hundreds of practice problems that are archived on the site, there are constant “active” challenges refreshing to ensure new content is delivered regularly. Top companies such as Uber, GoDaddy, Quora, and Dropbox, to name a few, also have code bots on Codefights. This enables you to go against both company bots and their own practice bots in head to head coding challenges. The challenges are timed and scored, and managed by the Codefights team and the companies that created them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codefights.com&quot;&gt;Codefights&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/codefights.png&quot;&gt;&lt;img src=&quot;/assets/images/codefights.png&quot; alt=&quot;codefights&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;coderbyte&quot;&gt;Coderbyte&lt;/h2&gt;

&lt;p&gt;Coderbyte compiles their coding challenges into courses tailored towards a specific goal. Some of the offerings at Coderbyte include Coding Bootcamp Prep and Job Interview Prep. Coderbtye also offers internal and external resources to teach concepts like variables, conditionals, functions, and loops in Javascript. Another quirk of Coderbyte is their mobile coding quizzes, accessible via mobile device.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://coderbyte.com/&quot;&gt;Coderbyte&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/coderbyte.png&quot;&gt;&lt;img src=&quot;/assets/images/coderbyte.png&quot; alt=&quot;coderbyte&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;These are all of the coding challenge websites that I’ve been able to practice on in my own time. There are many more websites and resources available to continue practicing, I couldn’t possibly list them all in one blog post. I hope you enjoyed taking some time to read about TDD (can you remember what that stands for?), practice problems, and how they are useful to you. If you enjoyed reading, check out some of my other posts, or shoot me an email if you have any feedback! Happy coding, and remember PRACTICE MAKES PERFECT!!&lt;/p&gt;

</description>
        <pubDate>Mon, 19 Sep 2016 00:00:00 -0400</pubDate>
        <link>https://aleo23.github.io/posts/enter-the-programming-dragon/</link>
        <guid isPermaLink="true">https://aleo23.github.io/posts/enter-the-programming-dragon/</guid>
        
        <category>practice practice practice</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
