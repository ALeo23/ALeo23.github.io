<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Saying Javascript</title>
    <description>A blog about Javascript, programming, and all of the beautiful and eccentric challenges one encounters while coding.
</description>
    <link>http://127.0.0.1:4000//</link>
    <atom:link href="http://127.0.0.1:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 12 Oct 2016 00:04:23 -0400</pubDate>
    <lastBuildDate>Wed, 12 Oct 2016 00:04:23 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Express Development</title>
        <description>&lt;h2 id=&quot;getting-started-with-express&quot;&gt;Getting Started With Express&lt;/h2&gt;

&lt;p&gt;Express is a web framework designed to abstract away a lot of the repeated code inside of node.js applications. You can find their documentation &lt;a href=&quot;https://expressjs.com/en/4x/api.html&quot;&gt;here&lt;/a&gt; and I highly recommend referencing it often while learning to use Express. Express has many built in functions for handling requests and serving responses. Express cleaned up their framework in the 4.x API and did a massive overhaul on the system. Express is now extremely modular and only comes with what a user will need to handle requests as mentioned above. Express comes pretty bare; &lt;code class=&quot;highlighter-rouge&quot;&gt;express.static&lt;/code&gt; is the only middleware that comes baked in with Express since the 4.x update, so be aware as you read examples online. Any examples referencing 3.x or earlier may contain outdated information.&lt;/p&gt;

&lt;h6 id=&quot;a-note-about-middleware&quot;&gt;A Note About Middleware&lt;/h6&gt;

&lt;p&gt;Middleware functions, in the world of Express, are simply plugins that extend Express’s functionality. A middleware function has a particular set of parameters it must take to work correctly; req, res, and next are required in middleware functions. Req is the request, res is the response, and next is a callback. The next function will signify the end of the function and allow the next functions to run. A function must either call &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; or end the request response cycle, or the server will hang. Middleware is loaded using &lt;code class=&quot;highlighter-rouge&quot;&gt;app.use()&lt;/code&gt;. Express also provides a great guide for writing your own middleware, &lt;a href=&quot;https://expressjs.com/en/guide/writing-middleware.html&quot;&gt;it’s not as hard as it sounds.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-express&quot;&gt;Using Express&lt;/h2&gt;

&lt;p&gt;Using Express is both intuitive and rewarding. I’ve typed up a quick example of a server with some key parts needed to get started handling some GET and POST requests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/express1.png&quot;&gt;&lt;img src=&quot;/assets/images/express1.png&quot; alt=&quot;express1&quot; /&gt;&lt;/a&gt;
&lt;em&gt;On the “Code Less Express!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Looking above, we can see that a lot of the request handling is being abstracted away for us. The only external functions that are not listed are the express module itself. Express can chain middleware functions using next to move along until an end or return is reached.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/express2.png&quot;&gt;&lt;img src=&quot;/assets/images/express2.png&quot; alt=&quot;express1&quot; /&gt;&lt;/a&gt;
&lt;em&gt;Postman allows you to debug POST requests without having to create forms and event handlers. (See below)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Generally, you’ll want your POST requests to have some sort of inner function that stores data somewhere in the storage method of your choice. These handlers can also take multiple callbacks and chain them together for more complex operations. The additional callbacks passed in will all call &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; when done running, and the final callback, not usually a named function, in the chain will end the response.&lt;/p&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;Express is a web framework built on top of node. Like many modules that exist for node, Express extends node’s functionality to make working with node less exhausting. Express now comes pretty bare, and only has what you need it to, after you import other middlewares and create your own. Postman is a great app designed to streamline API development and is very quick to pick up and use. Note that when using Express, we don’t need to require or use the ‘http’ module because Express is taking care of the heavy lifting.&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://www.9bitstudios.com/2013/09/express-js-authentication/&quot;&gt;Authentication with Express&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/express-node-server/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/express-node-server/</guid>
        
        <category>Using node.js</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Optimizing Images</title>
        <description>&lt;h2 id=&quot;images-as-data&quot;&gt;Images as Data&lt;/h2&gt;

&lt;p&gt;Computer images exist everywhere on the internet. Without them, the world would be a pretty bleak wasteland of text. Pictures display a wide variety of content across the internet, ususally related to the context. Wiki pages use images related to their content, social media profiles have pictures of their users, and games utilize special pictures called &lt;a href=&quot;https://css-tricks.com/css-sprites/&quot;&gt;sprites&lt;/a&gt; to render characters more efficiently.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/mountains.jpg&quot;&gt;&lt;img src=&quot;/assets/images/mountains.jpg&quot; alt=&quot;mountains&quot; /&gt;&lt;/a&gt;
A picture is worth 1,000 words, or so they say.&lt;/p&gt;

&lt;h6 id=&quot;image-file-size&quot;&gt;Image File Size&lt;/h6&gt;

&lt;p&gt;As you probably already know, data is stored on a computer in bytes, more often respresented by their larger values: kilobytes, megabytes, and gigabytes. If a picture is worth 1,000 words, how many bytes does it take? Trick question. Picture size is dependent on many factors, but the words you use to describe them in your blog post don’t affect the image size. Generally speaking, the more high quality an image is, the larger file size it will have. A main contributor to the quality is the image resolution.&lt;/p&gt;

&lt;h2 id=&quot;compressing-images&quot;&gt;Compressing Images&lt;/h2&gt;

&lt;p&gt;Images can be resized and optimized to fit your needs in order to decrease load times. Most times, a small image like the one above does not need to be a 4K resolution ultra HD picture to convey the details you’re trying to get across. The best practice is to only use the size that you need for your application.&lt;/p&gt;

&lt;p&gt;If the photo is going to be re-sized by your application to be 200px x 200px then it would be a great performance increase to take that load off of your CSS and just do it to the picture itself. To put it simply, making a file smaller, will make it load faster. Today, users demand web apps that are fast and responsive, and simply won’t use apps that feel old or dead. So, what’s the easiest way to re-size these images?&lt;/p&gt;

&lt;h2 id=&quot;imageoptim&quot;&gt;ImageOptim&lt;/h2&gt;

&lt;p&gt;Today, I discovered a new tool that I had to share: ImageOptim. ImageOptim is an application that comes with a slew of great &lt;a href=&quot;https://imageoptim.com/api&quot;&gt;features&lt;/a&gt; designed to streamline the performance of your deployment. One thing I really like about ImageOptim, is I don’t lose image quality when re-sizing the image. My images look exactly the same in production, but load much faster. The comet image on my main blog page now loads ~35kb less than it was before; reducing the amount of data needed to be retrieved from the server before the image can be loaded on screen. ImageOptim will also remove unnecessary metadata, comments, and embedded thumbnails to shrink down on size.&lt;/p&gt;

&lt;h6 id=&quot;versions-of-imageoptim&quot;&gt;Versions of ImageOptim&lt;/h6&gt;

&lt;p&gt;ImageOptim has a few different options available to access their services. Currently, I’m on the Mac App which installs quick, takes up little space, and is very easy to use with a drag and drop interface. ImageOptim will modify the original files that you drag and drop to re-size; I can recommend backing up any images you plan to manipulate. Drag and drop your files in the GUI to re-size and wait for the program to do its magic. I noticed that this did take some time to process the files provided, so performing the work yourself on your local machine before you publish sounds like the most stable option.&lt;/p&gt;

&lt;p&gt;ImageOptim also offers a couple of web services for users who do not wish to modify their local files. Their API is currently in beta and you can sign up to use it on their website. Listed in their documentation, you can also find out how to optimize on the fly. No back-end programming is needed to get this started; you’ll just edit your image URLs to point to the ImageOptim server and they’ll optimize them before sending to the client. Keep in mind that while this optimizes your images, this also involves another GET request and an outside service, which may actually detract from performance.&lt;/p&gt;

&lt;h2 id=&quot;take-aways&quot;&gt;Take Aways&lt;/h2&gt;

&lt;p&gt;Images are pictures on the internet that are used to display various forms of data. Images are made up of pixels, and the amount of pixels that make up an image is determined by its resolution. A higher resolution means a more detailed image and should only be used when needed. ImageOptim is a powerful and fast tool designed for re-sizing images based on user needs. Re-sizing an image manually, rather than having our code do it for us, causes our code to execute faster due to less required operations. The webpage will also load faster as there is less data being transferred over the wire.&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://imageoptim.com/mac&quot;&gt;ImageOptim Mac app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://learn.shayhowe.com/advanced-html-css/performance-organization/&quot;&gt;Shay Howe’s Advanced CSS: Performance Organization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://unsplash.com/&quot;&gt;Free High Quality Images For Your Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://www.creativebloq.com/graphic-design/what-is-dpi-image-resolution-71515673&quot;&gt;A Guide to Pixels, Resolutions, and DPI&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/optimizing-images/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/optimizing-images/</guid>
        
        <category>Rendering Images Faster</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Escaping HMTL</title>
        <description>&lt;h2 id=&quot;converting-values&quot;&gt;Converting Values&lt;/h2&gt;

&lt;p&gt;Malicious users can ‘inject’ HTML directly into your webpage via XSS(more about that below). When we escape HTML, we replace potentially dangerous characters with their escaped equivalents. A couple examples are highlighted at the end of the section. Escape HTML anywhere that there is a potential for any kind of user input.&lt;/p&gt;

&lt;p&gt;For instance, somebody accessed your vulnerable website and entered something like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;setInterval(function() {alert(&quot;We're no strangers to memes&quot;)},0)&amp;lt;/script&amp;gt;&lt;/code&gt; into a search bar. This code would then be ran within your HMTL page, entering you into an infinite loop of alerts that allude to &lt;a href=&quot;https://www.youtube.com/watch?v=dQw4w9WgXcQ&quot;&gt;Rick Astley&lt;/a&gt; jokes. Super malicious. You can prevent this insane act of terror from perversing your webpage by correctly escaping the HTML.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//escapes to &amp;amp;amp;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//escapes to &amp;amp;lt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//escapes to &amp;amp;gt;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//escapes to &amp;amp;quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//escapes to &amp;amp;#x27;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//escapes to &amp;amp;#96;&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;/ /&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;escapes&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x2F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One way to get these escaped values is the &lt;code class=&quot;highlighter-rouge&quot;&gt;_.escape&lt;/code&gt; function included in the &lt;a href=&quot;http://underscorejs.org/#escape&quot;&gt;underscore.js&lt;/a&gt; library. The accompanying &lt;code class=&quot;highlighter-rouge&quot;&gt;_.unescape&lt;/code&gt; function can be used to convert these strings to their unescaped values. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;Regular expressions&lt;/a&gt; can also be used to reject or replace strings that (potentially) contain an XSS atack. Note that you are not able to escape all of these using this method. Some of the above symbols can used to escape out of an HTML attribute value that is not quoted and it would be best to escape them. It is also best practice to quote all HMTL attributes for security purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/keyboard.jpg&quot;&gt;&lt;img src=&quot;/assets/images/keyboard.jpg&quot; alt=&quot;escape&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(You didn’t seriously click on that Rick Astley link did you?)&lt;/p&gt;

&lt;h2 id=&quot;unicode&quot;&gt;Unicode&lt;/h2&gt;

&lt;p&gt;Computers today are very powerful, capable machines, yet they’re still complex calculators that operate on numbers. All letter and symbol data that is input into a computer needs to be converted into some sort of number value in order to be interpreted by a computer. This process is referred to as &lt;em&gt;encoding&lt;/em&gt;; characters are encoded from letters into numbers. As with any other industry or project, a need for some sort of standardization quickly developed. &lt;a href=&quot;http://unicode.org/standard/WhatIsUnicode.html&quot;&gt;Unicode&lt;/a&gt; came in to save the day by providing a worldwide encoding standard. Unicode is more secure than the past systems, where programs would have to use multiple character encoding systems. This could lead to unexpected code being injected because all systems encode and transfer characters different. Their encoding standard is flexible and can be used across any language, spoken or programming, application, and platform. A healthy by-product of this flexibility is the worldwide availability of many software programs. Unicode eliminates a lot of the frustration involved with communicating with external networks and APIs.&lt;/p&gt;

&lt;h6 id=&quot;utf-8--utf-16--utf-32&quot;&gt;UTF-8 / UTF-16 / UTF-32&lt;/h6&gt;

&lt;p&gt;UTF-8 is the most commonly used type of the Unicode standard. Within Javascript and on the web, this will be the primary type you’ll work with. Other platforms such as Java, Windows, and Linux will use either UTF-16 or UTF-32 depending on their needs. UTF-16 and UTF-32 are two more currently implemented types of Unicode. These three versions are all fundamentally similar, but encode characters in different ways. UTF-8 provides up to four 8-bit bytes, UTF-16 holds up to two 16-bit code units and UTF-32 has one 32-bit code unit. No matter what version you are using, it is important to declare your charset using the appropriate HTML attribute within the meta tag. Characters can be transferred from one UTF type to another using algorithms found on the Unicode website. If you’re interested, check out their &lt;a href=&quot;http://unicode.org/faq/utf_bom.html&quot;&gt;FAQ&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://xss-game.appspot.com/&quot;&gt;A Game About XSS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://hack.me/t/XSS&quot;&gt;hack.me An XSS Challenges Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://www.owasp.org/index.php/Main_Page&quot;&gt;OWASP’s Vast Security Wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://underscorejs.org/#template&quot;&gt;Templates in Underscore&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 02 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/escaping-html/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/escaping-html/</guid>
        
        <category>Removing dangerous characters</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Application Security</title>
        <description>&lt;h2 id=&quot;information-is-important&quot;&gt;Information Is Important&lt;/h2&gt;

&lt;p&gt;Computer hackers have been around for a long time now and their business only becomes more lucrative. With the internet and telecommunications continuing to exponenetially grow, the demand for personal information only gets higher. This means that your security needs to be top-notch at all times in order to keep your users, their data, and yourself safe from malicious attacks. There are many oppurtunities for vulnerability while browsing the internet and it is very important to be aware of all of the various ways that you can keep your data safe.&lt;/p&gt;

&lt;h2 id=&quot;xss&quot;&gt;XSS&lt;/h2&gt;

&lt;p&gt;XSS is an acronym for cross-site scripting, which is a style of attack where a malicious user injects code into your program unwillingly. This can lead to a myriad of bad events ranging from changing your page layout to stealing all of your client’s sensitive user data. Protecting against XSS is important if you want your users to be able to trust that your website is safe. Many different attack vectors, some larger than others, exist that all have different vulnerabilities that need to be protected against. The primary ways to defend against XSS are far too long and involved to cover in one blog post. I highly encourage you to check out the XSS Prevention Cheat Sheet that OWASP has put together &lt;a href=&quot;https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/lock.jpg&quot;&gt;&lt;img src=&quot;/assets/images/lock.jpg&quot; alt=&quot;security&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6 id=&quot;owasp&quot;&gt;OWASP&lt;/h6&gt;

&lt;p&gt;The Open Web Application Security Project is designed to be a worldwide organization that specializes in application security. OWASP’s main goal is to allow worldwide distribution of software that can be trusted. They provide information about internet security such as common attack vectors for information, vulnerabilities, and proactive actions you can take. OWASP has a variety of cheat sheets and documentation around ways to protect yourself and design your applications to protect your users.&lt;/p&gt;

&lt;h2 id=&quot;same-origin-policy&quot;&gt;Same Origin Policy&lt;/h2&gt;

&lt;p&gt;Scripts are normally only to be run on the site that originated them. Sounds secure right? This rule is designed to keep users/clients safe from malicious websites. An origin consists of a domain, a sub-domain, protocol, and port; all of these must match to run a script according to the same origin policy. This rule does not protect a server or application from the client. Furthermore, this would even mean that if you wanted to make some changes on your website on a localhost port, any calls to a third party service would fail. This is all part of the browser and is implemented by the developer of the browser. Chrome, for example, allows this service to be disabled by starting the application with the –disable-web-security flag.&lt;/p&gt;

&lt;h6 id=&quot;cors&quot;&gt;CORS&lt;/h6&gt;

&lt;p&gt;Cross Origin Resource Sharing, CORS for short, is accessed when a client makes a request to a server other than its origin. This allows websites across different domains to share data with one another. As you can imagine, this benefit is also a risk, as the data passed between websites can be sensitive. The owner of the server being accessed gets to determine the access rights for CORS on that server.&lt;/p&gt;

&lt;p&gt;When a GET request is sent to the server, it will contain a CORS header. The server will then check to see if that client’s CORS header matches its Access-Control-Allow-Origin list. If the client has a valid header, the server will fulfill the requests, otherwise the server will send back an unauthorized error. Many servers disable CORS for security purposes, or use some sort of authentication before sending out data.  Authentication is usually verified in the form of user accounts, API keys, and cookies.&lt;/p&gt;

&lt;p&gt;A flowchart can be found &lt;a href=&quot;http://www.html5rocks.com/static/images/cors_server_flowchart.png&quot;&gt;here&lt;/a&gt; that shows the different steps the server will go through when receiving a GET or POST request from an off site client.&lt;/p&gt;

&lt;h6 id=&quot;jsonp&quot;&gt;JSONP&lt;/h6&gt;

&lt;p&gt;JSONP is Javascript Object Notation with Padding. JSONP can be used to bypass CORS and make cross-domain requests for data. What does it mean when we say “padding” on a JSON object? On the server side, the JSON object just gets wrapped in a callback function before being sent off. If you put the URL inside of a script tag, the browser is going to execute the script tag and download the linked script file, and execute the file once it’s been loaded. Script tags are able to pull files from the internet across domains, much like loading jQuery from a CDN. JSONP can be dangerous because the code that is being executed came from another domain. This should only be used with trusted sources.&lt;/p&gt;

</description>
        <pubDate>Sat, 01 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/protecting-against-xss/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/protecting-against-xss/</guid>
        
        <category>Cross Site Scripting</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Recursive Functions</title>
        <description>&lt;h1 id=&quot;what-is-recursion&quot;&gt;What is recursion?&lt;/h1&gt;

&lt;p&gt;Recursion is a computer science method where a solution can be derived from some amount of smaller solutions. This often means that a function will have to call upon itself with some sort of reduction until it reaches a base case. The base case is when the desired result can be found without another call to the function. This base case will keep the function from continually calling upon itself infinitely. Recursion can almost always be used in place of iteration and also save some time and add elegance to your code. Some examples of functions you could write using recursion are exponent and greatest common divisor. You could also implement a function that takes a given number of rounds and returns all possible moves for a rock paper scissors match or all possible combinations of change for a given dollar amount.&lt;/p&gt;

&lt;h1 id=&quot;recursive-functions-in-javascript&quot;&gt;Recursive Functions in Javascript&lt;/h1&gt;

&lt;p&gt;There are a few iterative functions that you may already know how to solve with a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop or even a call to &lt;code class=&quot;highlighter-rouge&quot;&gt;.forEach()&lt;/code&gt; that are great practice problems to get started on your way to understanding recursion. Recursion is not a concept that most people will pick up overnight, or in a short span of time; recursion will most likely take you some time to master and that’s OK. I’m here to help you get started on your way to mastering recursion.&lt;/p&gt;

&lt;h6 id=&quot;countdown&quot;&gt;Countdown&lt;/h6&gt;

&lt;p&gt;This function is a pretty simple one that we are going to use for illustrative purposes. Countdown is a function that will log numbers to the console until it reaches 0. Take a moment to think about how you would solve this using an iterative &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; loop. We’re going to be solving this using recursion, but it helps to have an illustration in your mind for comparison. What do you think the base case will be? Hint: I gave you the answer already inside this section; recursively read this paragraph until you figure out the base case. If you said our base case will be when the number passed in is equal to 0, you are correct! Our base case is when we want our recursive function to terminate, and start moving back up the call stack. Countdown(5) would look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;countdown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our function is going to continue logging &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; to the console until &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; is 0, in which case it will finally return and stop calling itself. Please note that alternatively, you &lt;em&gt;could&lt;/em&gt; make your base case 1 and call &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(number)&lt;/code&gt; one last time before returing, in order to eliminate one step from the process for optimization, but I felt the current implementation was clearer. If this base case was omitted, your computer would continue logging &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; to the console until it ran out of memory or the interpreter is shut down. I highly recommend not trying this, or at least saving your work first.&lt;/p&gt;

&lt;h6 id=&quot;factorial&quot;&gt;Factorial&lt;/h6&gt;

&lt;p&gt;A factorial of a number is the total sum of that number multiplied by every number between itself and 1, represented by &lt;code class=&quot;highlighter-rouge&quot;&gt;n!&lt;/code&gt;. For example 5! is 120, found by multiplying 5 * 4 * 3 * 2 * 1. Let’s break this out into some code and visualize this in Javascript.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s examine each element of this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator&quot;&gt;ternary operator&lt;/a&gt; and see what our function is doing on each step. You might have noticed that we have an extra case specified besides our base case. This error case is checking if the number we are passing into our function is a negative, and returning null if it is, because factorials only apply to positive integers. The next case is our base case. We’ll come back to that in just a second, can you think of how we can get our number value to reach our base case?&lt;/p&gt;

&lt;p&gt;By passing in &lt;code class=&quot;highlighter-rouge&quot;&gt;number - 1&lt;/code&gt; to our factorial function, we make another call to our factorial function with a number one value lower than the prevous iteration’s. We are also multiplying the result of that new function’s call by the current number. This will utilize what is known as the “call stack.” The call stack is a stack based data structure - last in, first out - that allows a function to keep track of where it was called from. The call stack will stand by, waiting for the bottom return value to return and move back up the chain. Finally, once 0 is passed in to our factorial function, we hit our base case, return the value 1.&lt;/p&gt;

&lt;p&gt;The interpreter will then travel back up the call stack, and eventually return the amount:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;120&lt;/strong&gt; once the 5 is multiplied by the return value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(4)&lt;/code&gt;, which was 24.&lt;/p&gt;

&lt;p&gt;24 was returned when 4 was multiplied by the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(3)&lt;/code&gt;, which was 6.&lt;/p&gt;

&lt;p&gt;6 was returned when 3 was multiplied by the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(2)&lt;/code&gt;, which was 2.&lt;/p&gt;

&lt;p&gt;2 was returned when 2 was multiplied by the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(1)&lt;/code&gt;, was was 1.&lt;/p&gt;

&lt;p&gt;1 was returned when 1 was multiplied by the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(0)&lt;/code&gt;, which was 1.&lt;/p&gt;

&lt;p&gt;This time our result does not have another call to factorial because we have hit our base case and simply returned 1. If you follow this stack backwards you should see how one can get from 1 to 120 using the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;factorial(5)&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;To understand recursion, one must first understand recursion. For another excellent blog post on recursion, &lt;a href=&quot;https://aleo23.github.io/posts/recursive-functions/&quot;&gt;please see here.&lt;/a&gt; A recursive function calls upon itself until it reaches the specified base case. Always remember to specify a base case and get one step closer to the base case on each iteration. Otherwise your recursive function becomes a resource eating glutton and &lt;a href=&quot;https://www.youtube.com/watch?v=8fvTxv46ano&quot;&gt;all your base&lt;/a&gt; are belong to us. Many problems can be solved through recursion, and practice will achieve mastery. Try refactoring some of your currently implemented iterative functions in recursion and feel the power!&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://github.com/JS-Challenges/recursion-prompts&quot;&gt;Recursion Prompts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://www.youtube.com/watch?v=k7-N8R0-KY4&quot;&gt;funfunfunction’s video all about Recursion, as part of his series on Functional programming in Javascript.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://www.codecademy.com/courses/javascript-lesson-205&quot;&gt;Codecademy’s Recursion in Javascript Course&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 21 Sep 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/recursive-functions/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/recursive-functions/</guid>
        
        <category>infinite loops</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
