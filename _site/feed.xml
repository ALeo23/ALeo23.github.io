<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Saying Javascript</title>
    <description>A blog about Javascript, programming, and all of the beautiful and eccentric challenges one encounters while coding.
</description>
    <link>http://127.0.0.1:4000//</link>
    <atom:link href="http://127.0.0.1:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 06 Nov 2016 19:12:58 -0500</pubDate>
    <lastBuildDate>Sun, 06 Nov 2016 19:12:58 -0500</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Angular Directive Syntax</title>
        <description>&lt;h2 id=&quot;angular-directives&quot;&gt;Angular Directives&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For the purposes of this article, we’ll be discussing Angular 1 and not Angular 2.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;Angular directives&lt;/a&gt; are powerful markers placed on or in DOM elements that associate behavior with the marked element. When the DOM is loaded, Angular uses an HTML compiler to create the element needed into a template. A template function is also produced which links the scope to the template, to create data binding. Angular allows users to create custom directives in addition to the out of the box directives included with Angular.&lt;/p&gt;

&lt;p&gt;Some of the commonly used directives  are &lt;code class=&quot;highlighter-rouge&quot;&gt;ngModel&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ngIf&lt;/code&gt;. Angular also provides the ability to create custom directives, which can be defined as attributes, elements, classes, and comments. Angular recommends using attributes and elements directives over classes and comments, as it is easier to determine the element that the directive matches.&lt;/p&gt;

&lt;h2 id=&quot;attribute-and-element-directives&quot;&gt;Attribute and Element directives&lt;/h2&gt;

&lt;p&gt;Attribute directives are placed onto an HTML element to provide that element with the defined behavior. For example, the directives &lt;code class=&quot;highlighter-rouge&quot;&gt;ngShow&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ngIf&lt;/code&gt; are both attribute directives. The key difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;ngShow&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ngIf&lt;/code&gt; is that &lt;code class=&quot;highlighter-rouge&quot;&gt;ngIf&lt;/code&gt; removes and recreates a DOM element, whereas &lt;code class=&quot;highlighter-rouge&quot;&gt;ngShow&lt;/code&gt; will toggle the element’s display property, but not remove the element from the DOM.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-show=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!DetailsVm.poster_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://s2.dmcdn.net/Ub1O8/1280x720-mCQ.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!DetailsVm.poster_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://i.ytimg.com/vi/MveqXxB12YA/hqdefault.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;This is how one might use &lt;code class=&quot;highlighter-rouge&quot;&gt;ngShow&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ngIf&lt;/code&gt; in their own code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The attribute directives above augment an existing HTML element and give that element a certain expected behavior. Element directives have many of the same powers and can be used in ways similar to templates in keeping code concise and modular.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;funny-cat&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-show=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!DetailsVm.poster_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://s2.dmcdn.net/Ub1O8/1280x720-mCQ.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/funny-cat&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;funny-dog&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!DetailsVm.poster_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://i.ytimg.com/vi/MveqXxB12YA/hqdefault.jpg&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/funny-dog&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;funny-cat&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;funny-dog&lt;/code&gt; are examples of custom element directives.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-custom-directive&quot;&gt;Creating a Custom Directive&lt;/h2&gt;

&lt;p&gt;The current project is a movie website that contains details about movies and TV shows accompanied by a robust search engine. A user can enter a search query and be taken to a results page, where a list of movies and TV shows awaits. In Angular, one solution would be to create an unordered list, and use &lt;code class=&quot;highlighter-rouge&quot;&gt;ngRepeat&lt;/code&gt; to fill that list with list item elements. This approach works, but can become extremely messy, depending on how much data is displayed on each search result. In an effort to develop modular, beautiful code, a custom directive can be used to inject HTML into a document from a template’s URL.&lt;/p&gt;

&lt;p&gt;The program will first require a directive to be created on the accompanying controller. Using the search results example, the controller in question might be called ResultsController. Directives can take a few different options when created which define the behaviors bound to that DOM element. Angular’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.directive&lt;/code&gt; takes two arguments by default; the first argument is the name of the directive, a string. A callback function is passed in as the second argument, which returns an object with configuration options for the directive.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--restrict types--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 'A' --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;search-result&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 'E' --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;search-result&amp;gt;&amp;lt;/search-result&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 'A' --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-result&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;restrict&lt;/code&gt; - Restricts how a directive can be used
    &lt;ul&gt;
      &lt;li&gt;‘A’ - Directive can be used as an attribute on an HTML element&lt;/li&gt;
      &lt;li&gt;‘E’ - Directive can be used as an HTML element&lt;/li&gt;
      &lt;li&gt;‘C’ - Directive can be used as a class on an HTML element&lt;/li&gt;
      &lt;li&gt;‘M’ - Directive can be used as a comment within the HTML
        &lt;ul&gt;
          &lt;li&gt;Comment directives are somewhat deprecated and &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-repeat-start&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-repeat-end&lt;/code&gt; should be used instead to populate &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;table&amp;gt;&lt;/code&gt; elements&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;replace&lt;/code&gt; - Determines whether HTML element declared on will be replaced
    &lt;ul&gt;
      &lt;li&gt;Takes a boolean value&lt;/li&gt;
      &lt;li&gt;Ex. If an attribute directive is on a div, true would replace the div, and false would nest the directive inside the div&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scope&lt;/code&gt; - Create an isolate scope for the directive to separate the scopes
    &lt;ul&gt;
      &lt;li&gt;Allows the outer scope to be mapped to the inner scope&lt;/li&gt;
      &lt;li&gt;Makes results more dynamic so code is more DRY&lt;/li&gt;
      &lt;li&gt;Scope can take a scope object as well to create a new scope for the directive&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;templateUrl&lt;/code&gt; - Defines path to the HTML file that contains HTML to insert&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Results is a factory defined in another file&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'reviews.results'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//ResultsVm is defined inside the collapsed controller block&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//and mostly contains data to be inserted into the DOM&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ResultsController'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'searchResult'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'app/results/searchResult.html'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The custom behavior has been defined in the Javascript files and the HTML will need to be edited to reflect the new behvaior. Here’s the program without any custom directives:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Displays number of total results found from query. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Your search returned  results.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result in ResultsVm.results&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/#/details//&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--ng-if Hides results which are generally less useful --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result.poster_path !== null&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resultPoster&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- If invalid poster_path or profile_path, don't display the image --&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-hide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!result.poster_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://image.tmdb.org/t/p/w185/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-hide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!result.profile_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://image.tmdb.org/t/p/w185/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;If you’re not sure what ResultsVm means, go check out my blog post on using controllerAs!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ideally, we could re-factor this code to be two separate files, since we really have two separate intents here. One intent is that the program will need to display a list of search results. The other intent for the results page is that each search result will need to display details for one result. Creating a directive involves modifying the controller and creating a new HTML file to hold our directive.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--app/results/searchResult.html--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--This code represents our list of search results. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;Your search returned  results.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Element directive is inserted here. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;search-result&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result in ResultsVm.results&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/search-result&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is a separation of concerns between displaying results and displaying details.These two files have been separated to reflect each concern, the above displaying all results, while the below displays the details of each result.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--app/results/results.html--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--We can factor out this code as this will represent our search result. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/#/details//&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result.poster_path !== null&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;resultPoster&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-hide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!result.poster_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://image.tmdb.org/t/p/w185/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-hide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!result.profile_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://image.tmdb.org/t/p/w185/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-show=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;!result.poster_path &amp;amp;&amp;amp; !result.profile_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://dummyimage.com/185x275/000/fff&amp;amp;text=&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Take notice that the ng-repeat goes on the directive, as this is the item that needs to be repeated, for each result.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Above is an example of two different HTML files being used together to make up a primitive search results page. The difference is that we have refactored the code based on intent. The intention to display a list of search results has been placed into the first file. Using directives, the HTML compiler is instructed that this first file will need the contents of the second file. An element tag is created where the content will need to be injected, using the contents of the second file, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;ngRepeat&lt;/code&gt; tells the compiler that this will happen more than once.&lt;/p&gt;

&lt;h2 id=&quot;one-more-time&quot;&gt;One More Time&lt;/h2&gt;

&lt;p&gt;Angular provides directives as a powerful way to define custom behavior within a program. Directives enforce clean, modular code that is more maintainable. The controller file is usually where directives are written and stored. The HTML will then need to be re-factored, or freshly written, to use the newly defined directives. Element and attribute directives are considered best practice and directive templateUrls should be used to keep the codebase concise and maintainable.&lt;/p&gt;

&lt;p&gt;Below are some additional resources for Angular and this style, happy coding!&lt;/p&gt;

&lt;p&gt;As always, I’d love to hear your feedback via &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#108;&amp;#101;&amp;#111;&amp;#049;&amp;#051;&amp;#051;&amp;#055;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;email&lt;/a&gt; or whatever form may be more convenient for you, more info in the About section!&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular JS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://docs.angularjs.org/guide/directive&quot;&gt;Angular JS Directives&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://www.sitepoint.com/practical-guide-angularjs-directives/&quot;&gt;A Practical Guide to Using AngularJS Directives&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#directives&quot;&gt;John Papa’s Style Guide - Directives&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 06 Nov 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/angular-directive-syntax/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/angular-directive-syntax/</guid>
        
        <category>Custom Elements.</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Angular ControllerAs Syntax</title>
        <description>&lt;h2 id=&quot;angular-controller&quot;&gt;Angular Controller&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For the purposes of this article, we’ll be discussing Angular 1 and not Angular 2.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In Angular, the controller is a constructor function. This controller is used to create a controller object, that adds properties to the scope of an attached view model. Normally, this is represented by Angular’s injectable &lt;code class=&quot;highlighter-rouge&quot;&gt;$scope&lt;/code&gt; object. Views are represented by DOM elements being rendered on the page. A view is typically bound to a model, and displays data dynamically based on the data in the model. $scope is a representation of the view model and can be replaced using a variable bound to the context of &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;. View model is often shortened to vm in applications. A controller can be assigned to a view by applying a &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-controller&lt;/code&gt; tag or specifying the controller in the router settings.&lt;/p&gt;

&lt;h2 id=&quot;eliminating-scope&quot;&gt;Eliminating $scope&lt;/h2&gt;

&lt;p&gt;Re-factoring code already using $scope is a quick way to see how easy it can be to implement this style change in your own work. To re-factor an existing controller you must:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LinksController'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateLinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;Remove the $scope being injected from the calback function’s arguments.&lt;/li&gt;
  &lt;li&gt;Declare a new variable controllerVm and set it equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;. This will capture the context of the &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; binding to prevent unexpected context changes.&lt;/li&gt;
  &lt;li&gt;Place all properties previously on $scope onto the newly created view model object. Find and replace works great in this scenario.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LinksController'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LinksVm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;LinksVm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;LinksVm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateLinks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;LinksVm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;controlleras&quot;&gt;controllerAs&lt;/h2&gt;

&lt;p&gt;Firstly, we’ll look at adding a view model using a router. I’m a big fan of &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt; for my Angular routing, and I’ll be covering that in this tutorial. If you’re not familiar with ui-router, you can also use this same syntax in the route settings for ng-route.&lt;/p&gt;

&lt;p&gt;Normally, your routing in ui-router might look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/controller.png&quot;&gt;&lt;img src=&quot;/assets/images/controller.png&quot; alt=&quot;controller&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using controllerAs, you can assign a specific view model as the controller for the view:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/controllerAs.png&quot;&gt;&lt;img src=&quot;/assets/images/controllerAs.png&quot; alt=&quot;controllerAs&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;ng--tags&quot;&gt;‘ng-‘ tags&lt;/h2&gt;

&lt;p&gt;Generally, best practice is to assign the controller and controllerAs inside of your $stateProvider settings, but this assignment can also be made directly in the HTML. On the desired view, just modify your existing &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-controller&lt;/code&gt; attribute to specify controllerAs, like below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/controllerTag.png&quot;&gt;&lt;img src=&quot;/assets/images/controllerTag.png&quot; alt=&quot;controllerTag&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;touch-up-your-html&quot;&gt;Touch Up Your HTML&lt;/h2&gt;

&lt;p&gt;Finally, any properties previously on $scope are now attached to the specified view model. You’ll need to edit your attributes within the HTML files associated with this controller to point to the correct properties. Once this is done, you should have completed your re-factor to using a view model. If something is not working, make sure that you have :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Created a new variable, such as FooVm, and set that equal to the current &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; context.&lt;/li&gt;
  &lt;li&gt;Removed $scope from the callback function being passed to the controller.&lt;/li&gt;
  &lt;li&gt;Added all properties previously on $scope to the FooVm&lt;/li&gt;
  &lt;li&gt;Set up a controllerAs property either in $stateParams OR in your view, not both&lt;/li&gt;
  &lt;li&gt;Placed the FooVm using dot notation on the properties in your HTML previously on $scope&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/controllerAsVm.png&quot;&gt;&lt;img src=&quot;/assets/images/controllerAsVm.png&quot; alt=&quot;controllerAsVm&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-using-controlleras&quot;&gt;Benefits of Using controllerAs&lt;/h2&gt;

&lt;p&gt;Using controllerAs doesn’t come with any astronomical benefits to your code by itself that would make it otherwise terrible code, but it greatly improves readability and understanding to your code. ControllerAs sits well with Javascript developers because it looks like a Javascript contructor, and it eliminates some of the confusion around understanding $scope. Using a view model will also provide clarity when deciding if methods should go in a controller or a factory. Be consistent with your naming conventions of view models, and avoid directly using &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; to bind controller methods. Each controller should only be assigned to one view and should be as specific and clear as possible.&lt;/p&gt;

&lt;p&gt;Stay tuned for an accompanying post on directives and improving your Angular skills further!&lt;/p&gt;

&lt;p&gt;Below are some additional resources for Angular and this style, happy coding!&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://github.com/johnpapa/angular-styleguide&quot;&gt;John Papa’s Style Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://docs.angularjs.org/guide/controller&quot;&gt;Angular Controllers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular JS&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 29 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/angular-controllerAs-syntax/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/angular-controllerAs-syntax/</guid>
        
        <category>More readable code with fewer surprises</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Angular and APIs</title>
        <description>&lt;h2 id=&quot;angular-1&quot;&gt;Angular 1&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;For the purposes of this article, we’ll be discussing Angular 1 and not Angular 2. I hope to be able to make a blog post about Angular 2 in the future when I have time to get my hands on it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Angular is an MVC (though this is much debated, MV* if you prefer) web framework built using our favorite language, Javascript. Angular is developed by Google and extends HTML functionality to make use of dynamic rendering. Gone are the days of simple, static webpages. With frameworks like React and Backbone alongside Angular, the web is becoming a content-rich dynamic place to share information, and applications still need to keep up with user expectations. These applications are designed to load content quickly and I find writing code to be faster when using a framework like Angular, because it enforces &lt;em&gt;modularity.&lt;/em&gt;&lt;/p&gt;

&lt;h6 id=&quot;a-note-about-modularity&quot;&gt;A note about modularity&lt;/h6&gt;

&lt;p&gt;Modular code is broken into small re-usable parts that can serve more than one specific purpose. Being modular will make you a better programmer because you will write more efficient code that it easier to follow and understand. Coding in a modular style also helps me to understand both the framework I’m utilizing and the data flow inside my own application.&lt;/p&gt;

&lt;p&gt;Angular is an opinionated framework, which means that its structure is a little rigid, and you’ve got to play by Angular’s rules. Though once you learn the rules and jargon, playing with Angular can be a real blast. Don’t fret, Angular has extensive and thorough &lt;a href=&quot;https://docs.angularjs.org/api&quot;&gt;documentation&lt;/a&gt; available. Angular makes use of built-in HTML attributes, as well as some of their own to extend functionality. Angular’s attribute tags can be recognized by their &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-&lt;/code&gt; prefix. I’ll cover a few of the more common tags and how you can use them to get started.&lt;/p&gt;

&lt;h2 id=&quot;ng--tags&quot;&gt;‘ng-‘ tags&lt;/h2&gt;

&lt;p&gt;Angular uses custom attribute tags on HTML elements to help you render dynamic content and manage two way data binding. Two way data binding is one of Angular’s unique features that can make it more convenient to work with than other frameworks. Two way data binding means that there is communication going TO the model FROM the view and vice versa. This two way relationship means that the model and view are in a constant similar state. When data updates on the model, the view updates as well, updating the UI. When data updates on the view, then the model is updated to reflect the mutated data, which is great for handling user input. Remember that our view is represented by an HTML element being rendered on the screen. There are dozens of built-in directives designed to make your time with Angular more productive. In Angular, the controller is the glue between the model and view that keeps them together, and manages the two way data flow.&lt;/p&gt;

&lt;h2 id=&quot;examples-using-travelr&quot;&gt;Examples Using Travelr&lt;/h2&gt;

&lt;p&gt;Here I’ll show some of the code from my own Angular app called &lt;a href=&quot;https://travelr-mvp.herokuapp.com/&quot;&gt;Travelr&lt;/a&gt;. Travelr is a free, open-source app coded using Express, Node, and Angular. If you’re interested in Express or Node, check out last week’s post, &lt;a href=&quot;https://aleo23.github.io/posts/express-node-server/&quot;&gt;all about Express&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ng-app&lt;/code&gt; is the way default way to assign an Angular module to an HTML file; this will automatically bootstrap the application. Assign &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-app&lt;/code&gt; the name of your app that you designed in your app file. In my case, I used the name of my app, travelr.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/ang-app.png&quot;&gt;&lt;img src=&quot;/assets/images/ang-app.png&quot; alt=&quot;ang-app&quot; /&gt;&lt;/a&gt;
&lt;em&gt;The ng-app tag usually goes on the html tag. ng-cloak here is preventing our page from loading before the handlebars/mustaches have injected the desired data.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ng-controller&lt;/code&gt; is used to assign a controller to an element and its nested elements. Doing so will make methods and properties defined inside the controller available in our HMTL.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/ang-controller.png&quot;&gt;&lt;img src=&quot;/assets/images/ang-controller.png&quot; alt=&quot;ang-controller&quot; /&gt;&lt;/a&gt;
&lt;em&gt;Here we see how to apply a controller to an element within our app.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ng-model&lt;/code&gt; binds a specific element (view) to a model associated with the element’s controller. The controller maintains a relationship between the model and the designated view.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/ang-model.png&quot;&gt;&lt;img src=&quot;/assets/images/ang-model.png&quot; alt=&quot;ang-model&quot; /&gt;&lt;/a&gt;
&lt;em&gt;In the weather portion of Travelr, to search the API, the user must enter their search terms into the input fields. The input fields pass the data along through the ng-model whenever they are updated.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ng-click&lt;/code&gt; is a handy way of binding a function on the controller to an HTML element. The function &lt;code class=&quot;highlighter-rouge&quot;&gt;findWeather&lt;/code&gt; is being called by our new click handler. Let’s see what that code does with the query object passed into it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/ang-click.png&quot;&gt;&lt;img src=&quot;/assets/images/ang-click.png&quot; alt=&quot;ang-click&quot; /&gt;&lt;/a&gt;
&lt;em&gt;The click event is calling the findWeather function, which in turn calls fetchWeather, and that calls getWeather.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here you’ll see the query object we’ve been passing in to get the weather. Not yet pictured is the getWeather function, which handles getting the data from the API. The models defined in our input tags are changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;city&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; properties on our query before passing it through our asynchronous function chain whenever the user changes the input.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/ang-services.png&quot;&gt;&lt;img src=&quot;/assets/images/ang-services.png&quot; alt=&quot;ang-services&quot; /&gt;&lt;/a&gt;
&lt;em&gt;getWeather passes the query to the Yahoo Weather API, which works around the globe and returns the data in a promise.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, we pass our query object in to the &lt;code class=&quot;highlighter-rouge&quot;&gt;getWeather&lt;/code&gt; function and save our data when the data returns to our &lt;code class=&quot;highlighter-rouge&quot;&gt;findWeather&lt;/code&gt; function. The properties on the saved data, in this case the saved data from my GET request, is on the &lt;code class=&quot;highlighter-rouge&quot;&gt;place&lt;/code&gt; property. Using the API documentation for the Yahoo Weather API, I was able to navigate the saved object and inject the desired properties into my HTML using &lt;strong&gt;{{ handlebars/mustaches }}&lt;/strong&gt;, whatever you prefer to call them. I like to imagine them as a mustached man riding a bike.&lt;/p&gt;

&lt;h2 id=&quot;api-ngular&quot;&gt;API-ngular&lt;/h2&gt;

&lt;p&gt;At first, manipulating data through an API in Angular seemed like a daunting task. I started my project, taking it one step at a time, writing modular code and focusing on a minimum viable product. I suggest working at a manageable pace, and focusing on one aspect of your code at a time. My personal strategy was to make a couple GET requests to the desired API using Postman, then hard code the data into my application, and render it the way I wanted. This way, I knew what to expect for a result, and had one less thing to debug when things weren’t rendering as expected (surprise!). Once my app was rendering correctly, I started hooking up the API. From there, it was as simple as saving the data and deleting my hard coded information. In addition, keep in mind a view is the data being rendered on the page, usually in the form of an HTML element. A more thorough version of Travelr’s source code is available on a github &lt;a href=&quot;https://github.com/ALeo23/travelr&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check out the links below if you’d like to learn more about Angular, in particular, scotch.io has many great resources for quirky problems and solutions you may run into during your Angular adventures.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular JS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;Angular’s Official Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://scotch.io/&quot;&gt;scotch.io&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 18 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/angular-and-apis/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/angular-and-apis/</guid>
        
        <category>Integrating APIs into your Angular Views</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Express Development</title>
        <description>&lt;h2 id=&quot;getting-started-with-express&quot;&gt;Getting Started With Express&lt;/h2&gt;

&lt;p&gt;Express is a web framework designed to abstract away a lot of the repeated code inside of node.js applications. You can find their documentation &lt;a href=&quot;https://expressjs.com/en/4x/api.html&quot;&gt;here&lt;/a&gt; and I highly recommend referencing it often while learning to use Express. Express has many built in functions for handling requests and serving responses. Express cleaned up their framework in the 4.x API and did a massive overhaul on the system. Express is now extremely modular and only comes with what a user will need to handle requests as mentioned above. Express comes pretty bare; &lt;code class=&quot;highlighter-rouge&quot;&gt;express.static&lt;/code&gt; is the only middleware that comes baked in with Express since the 4.x update, so be aware as you read examples online. Any examples referencing 3.x or earlier may contain outdated information.&lt;/p&gt;

&lt;h6 id=&quot;a-note-about-middleware&quot;&gt;A Note About Middleware&lt;/h6&gt;

&lt;p&gt;Middleware functions, in the world of Express, are simply plugins that extend Express’s functionality. A middleware function has a particular set of parameters it must take to work correctly; req, res, and next are required in middleware functions. Req is the request, res is the response, and next is a callback. The next function will signify the end of the function and allow the next functions to run. A function must either call &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; or end the request response cycle, or the server will hang. Middleware is loaded using &lt;code class=&quot;highlighter-rouge&quot;&gt;app.use()&lt;/code&gt;. Express also provides a great guide for writing your own middleware, &lt;a href=&quot;https://expressjs.com/en/guide/writing-middleware.html&quot;&gt;it’s not as hard as it sounds.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-express&quot;&gt;Using Express&lt;/h2&gt;

&lt;p&gt;Using Express is both intuitive and rewarding. I’ve typed up a quick example of a server with some key parts needed to get started handling some GET and POST requests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/express1.png&quot;&gt;&lt;img src=&quot;/assets/images/express1.png&quot; alt=&quot;express1&quot; /&gt;&lt;/a&gt;
&lt;em&gt;On the “Code Less Express!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Looking above, we can see that a lot of the request handling is being abstracted away for us. The only external functions that are not listed are the express module itself. Express can chain middleware functions using next to move along until an end or return is reached.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/express2.png&quot;&gt;&lt;img src=&quot;/assets/images/express2.png&quot; alt=&quot;express1&quot; /&gt;&lt;/a&gt;
&lt;em&gt;Postman allows you to debug POST requests without having to create forms and event handlers. (See below)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Generally, you’ll want your POST requests to have some sort of inner function that stores data somewhere in the storage method of your choice. These handlers can also take multiple callbacks and chain them together for more complex operations. The additional callbacks passed in will all call &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; when done running, and the final callback, not usually a named function, in the chain will end the response.&lt;/p&gt;

&lt;h2 id=&quot;going-further&quot;&gt;Going Further&lt;/h2&gt;

&lt;p&gt;Express is a web framework built on top of node. Like many modules that exist for node, Express extends node’s functionality to make working with node less exhausting. Express now comes pretty bare, and only has what you need it to, after you import other middlewares and create your own. Postman is a great app designed to streamline API development and is very quick to pick up and use. Note that when using Express, we don’t need to require or use the ‘http’ module because Express is taking care of the heavy lifting.&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://www.9bitstudios.com/2013/09/express-js-authentication/&quot;&gt;Authentication with Express&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://www.getpostman.com/&quot;&gt;Postman&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/express-node-server/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/express-node-server/</guid>
        
        <category>Using node.js</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>Optimizing Images</title>
        <description>&lt;h2 id=&quot;images-as-data&quot;&gt;Images as Data&lt;/h2&gt;

&lt;p&gt;Computer images exist everywhere on the internet. Without them, the world would be a pretty bleak wasteland of text. Pictures display a wide variety of content across the internet, ususally related to the context. Wiki pages use images related to their content, social media profiles have pictures of their users, and games utilize special pictures called &lt;a href=&quot;https://css-tricks.com/css-sprites/&quot;&gt;sprites&lt;/a&gt; to render characters more efficiently.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/mountains.jpg&quot;&gt;&lt;img src=&quot;/assets/images/mountains.jpg&quot; alt=&quot;mountains&quot; /&gt;&lt;/a&gt;
A picture is worth 1,000 words, or so they say.&lt;/p&gt;

&lt;h6 id=&quot;image-file-size&quot;&gt;Image File Size&lt;/h6&gt;

&lt;p&gt;As you probably already know, data is stored on a computer in bytes, more often respresented by their larger values: kilobytes, megabytes, and gigabytes. If a picture is worth 1,000 words, how many bytes does it take? Trick question. Picture size is dependent on many factors, but the words you use to describe them in your blog post don’t affect the image size. Generally speaking, the more high quality an image is, the larger file size it will have. A main contributor to the quality is the image resolution.&lt;/p&gt;

&lt;h2 id=&quot;compressing-images&quot;&gt;Compressing Images&lt;/h2&gt;

&lt;p&gt;Images can be resized and optimized to fit your needs in order to decrease load times. Most times, a small image like the one above does not need to be a 4K resolution ultra HD picture to convey the details you’re trying to get across. The best practice is to only use the size that you need for your application.&lt;/p&gt;

&lt;p&gt;If the photo is going to be re-sized by your application to be 200px x 200px then it would be a great performance increase to take that load off of your CSS and just do it to the picture itself. To put it simply, making a file smaller, will make it load faster. Today, users demand web apps that are fast and responsive, and simply won’t use apps that feel old or dead. So, what’s the easiest way to re-size these images?&lt;/p&gt;

&lt;h2 id=&quot;imageoptim&quot;&gt;ImageOptim&lt;/h2&gt;

&lt;p&gt;Today, I discovered a new tool that I had to share: ImageOptim. ImageOptim is an application that comes with a slew of great &lt;a href=&quot;https://imageoptim.com/api&quot;&gt;features&lt;/a&gt; designed to streamline the performance of your deployment. One thing I really like about ImageOptim, is I don’t lose image quality when re-sizing the image. My images look exactly the same in production, but load much faster. The comet image on my main blog page now loads ~35kb less than it was before; reducing the amount of data needed to be retrieved from the server before the image can be loaded on screen. ImageOptim will also remove unnecessary metadata, comments, and embedded thumbnails to shrink down on size.&lt;/p&gt;

&lt;h6 id=&quot;versions-of-imageoptim&quot;&gt;Versions of ImageOptim&lt;/h6&gt;

&lt;p&gt;ImageOptim has a few different options available to access their services. Currently, I’m on the Mac App which installs quick, takes up little space, and is very easy to use with a drag and drop interface. ImageOptim will modify the original files that you drag and drop to re-size; I can recommend backing up any images you plan to manipulate. Drag and drop your files in the GUI to re-size and wait for the program to do its magic. I noticed that this did take some time to process the files provided, so performing the work yourself on your local machine before you publish sounds like the most stable option.&lt;/p&gt;

&lt;p&gt;ImageOptim also offers a couple of web services for users who do not wish to modify their local files. Their API is currently in beta and you can sign up to use it on their website. Listed in their documentation, you can also find out how to optimize on the fly. No back-end programming is needed to get this started; you’ll just edit your image URLs to point to the ImageOptim server and they’ll optimize them before sending to the client. Keep in mind that while this optimizes your images, this also involves another GET request and an outside service, which may actually detract from performance.&lt;/p&gt;

&lt;h2 id=&quot;take-aways&quot;&gt;Take Aways&lt;/h2&gt;

&lt;p&gt;Images are pictures on the internet that are used to display various forms of data. Images are made up of pixels, and the amount of pixels that make up an image is determined by its resolution. A higher resolution means a more detailed image and should only be used when needed. ImageOptim is a powerful and fast tool designed for re-sizing images based on user needs. Re-sizing an image manually, rather than having our code do it for us, causes our code to execute faster due to less required operations. The webpage will also load faster as there is less data being transferred over the wire.&lt;/p&gt;

&lt;h2 id=&quot;see-also&quot;&gt;See Also&lt;/h2&gt;

&lt;p&gt;-&lt;a href=&quot;https://imageoptim.com/mac&quot;&gt;ImageOptim Mac app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://learn.shayhowe.com/advanced-html-css/performance-organization/&quot;&gt;Shay Howe’s Advanced CSS: Performance Organization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;https://unsplash.com/&quot;&gt;Free High Quality Images For Your Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;http://www.creativebloq.com/graphic-design/what-is-dpi-image-resolution-71515673&quot;&gt;A Guide to Pixels, Resolutions, and DPI&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://127.0.0.1:4000//posts/optimizing-images/</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//posts/optimizing-images/</guid>
        
        <category>Rendering Images Faster</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
